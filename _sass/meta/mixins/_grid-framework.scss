// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }
  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  $list: ".col-#{$class}-1";

  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }

  #{$list} {
    float: left;
  }

  @for $i from 0 through $grid-columns {
    @if ($i > 0) {
      .col-#{$class}-#{$i} {
        width: percentage($i / $grid-columns);
      }

      .col-#{$class}-pull-#{$i} {
        right: percentage(($i / $grid-columns));
      }

      .col-#{$class}-push-#{$i} {
        left: percentage(($i / $grid-columns));
      }
    }

    @if ($i == 0) {
      .col-#{$class}-pull-0 {
        right: auto;
      }

      .col-#{$class}-push-0 {
        left: auto;
      }
    }

    .col-#{$class}-offset-#{$i} {
      margin-left: percentage(($i / $grid-columns));
    }
  }
}
