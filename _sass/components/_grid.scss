//
// Grid system
// --------------------------------------------------


$container: (
  sm:   (720px + $grid-gutter-width),
  md:   (940px + $grid-gutter-width),
  lg:   (1140px + $grid-gutter-width)
) !default;


@mixin make-grid($class) {

  %col-#{$class} {
    float: left;
  }

  @for $i from 0 through $grid-columns {
    @if ($i > 0) {
      .col-#{$class}-#{$i} {
        width: percentage($i / $grid-columns);

        @extend %col-#{$class};
      }

      .col-#{$class}-pull-#{$i} {
        right: percentage(($i / $grid-columns));
      }

      .col-#{$class}-push-#{$i} {
        left: percentage(($i / $grid-columns));
      }
    }

    @if ($i == 0) {
      .col-#{$class}-pull-0 {
        right: auto;
      }

      .col-#{$class}-push-0 {
        left: auto;
      }
    }

    .col-#{$class}-offset-#{$i} {
      margin-left: percentage(($i / $grid-columns));
    }
  }
}


.container {
  margin-right: auto;
  margin-left: auto;
}

.container-fixed {
  @media (min-width: $screen-sm-min) {
    width: map-get($container, sm);
  }

  @media (min-width: $screen-md-min) {
    width: map-get($container, md);
  }

  @media (min-width: $screen-lg-min) {
    width: map-get($container, lg);
  }
}

%col {
  position: relative;

  // Prevent columns from collapsing when empty
  min-height: 1px;
  padding-right: ($grid-gutter-width / 2);
  // Inner gutter via padding
  padding-left: ($grid-gutter-width / 2);
}

@each $class in xs, sm, md, lg {
  @for $i from 1 through $grid-columns {
    .col-#{$class}-#{$i} {
      @extend %col;
    }
  }
}

@include make-grid(xs);

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}

.col-sm-4 {
  &:nth-child(3n + 2) {
    clear: both;
  }
}
