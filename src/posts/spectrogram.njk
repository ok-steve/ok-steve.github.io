---
title: "Frequency bar graph (with Vue, D3, and Rxjs)"
date: 2017-10-02
permalink: "posts/2017/10/02/spectrogram/"
---

{% set settings = {
  title: title,
  tags: [],
  scripts: [
    "https://unpkg.com/vue@2.4.4/dist/vue.min.js",
    "https://cdnjs.cloudflare.com/ajax/libs/d3/4.10.2/d3.min.js",
    "https://cdnjs.cloudflare.com/ajax/libs/rxjs/5.4.3/Rx.min.js"
  ],
  stylesheets: []
} %}
{% codepen settings %}
<pre data-lang="html"><code class="language-html">{% set html %}<div id="app">
  <p>Click document to start</p>
  <bar-chart width="960" height="600" :data="frequencies"></bar-chart>
</div>

<template id="bar-chart">
  <svg :view-box.camel="viewBox">
    <rect v-for="bar in bars" v-bind="bar"></rect>
  </svg>
</template>
{% endset -%}
{{ html }}</code></pre>
<pre data-lang="css"><code class="language-css">html {
  background-color: black;
}

body {
  display: flex;
  align-items: center;
  justify-content: center;
}

p {
  color: white;
  text-align: center;
}

#app {
  flex: 1;
}</code></pre>
<pre data-lang="babel"><code class="language-js">/**
 * Global variables
 */

const MIN_FREQ = 20;
const MAX_FREQ = 6000;
const NUM_BARS = 32;
const FFT_SIZE = 1024 * 8;
const CONTEXT = new AudioContext();

/**
 * Utility functions
 */

const average = list => list.reduce((x, y) => x + y) / list.length;

const nToFreq = d3.scalePow()
  .exponent(2)
  .domain([0, NUM_BARS])
  .range([MIN_FREQ, MAX_FREQ]);

const freqToBin = d3.scaleLinear()
  .domain([0, CONTEXT.sampleRate / 2])
  .range([0, FFT_SIZE / 2]);

const BIN_LOWER = Math.floor(freqToBin(MIN_FREQ));
const BIN_UPPER = Math.floor(freqToBin(MAX_FREQ));

// Use a power scale to group bins into equal pitch ranges
const nToBin = n => Math.floor(freqToBin(nToFreq(n)) - BIN_LOWER);

const aggregate = (data, num) => {
  return new Uint8Array(num).map((_, i) => {
    const lowerBound = Math.floor(nToBin(i));
    const upperBound = Math.floor(nToBin(i + 1));

    return average(data.slice(lowerBound, upperBound));
  });
};

/**
 * Vue
 */

const BarChart = {
  template: '#bar-chart',
  props: [
    'data',
    'width',
    'height',
  ],
  computed: {
    bars() {
      const len = this.data.length;

      const xScale = d3.scaleBand()
        .domain(d3.range(len))
        .rangeRound([0, this.width])
        .paddingInner(0.05);

      const yScale = d3.scaleLinear()
        .range([0, this.height])
        .domain([0, 255]); // TODO don't hardcode this value

      return Array.from(this.data).map((d, i) => {
        return {
          x: xScale(i),
          y: this.height - yScale(d),
          width: xScale.bandwidth(),
          height: yScale(d),
          fill: d3.interpolateRainbow(i / len),
        };
      });
    },
    viewBox() {
      return `0 0 ${this.width} ${this.height}`;
    },
  }
};

/**
 * Audio
 */

const analyser = CONTEXT.createAnalyser();

analyser.fftSize = FFT_SIZE;

const dataArray = new Uint8Array(analyser.frequencyBinCount);

const microphone = Rx.Observable.of(navigator)
  .flatMap(nav => nav.mediaDevices.getUserMedia({ audio: true, video: false }));

const mediaStream = microphone.map(stream => CONTEXT.createMediaStreamSource(stream))
  .do(source => source.connect(analyser));

const animationFrame = Rx.Observable.interval(0, Rx.Scheduler.animationFrame);

const frequencyData = animationFrame.withLatestFrom(mediaStream).map(([frame, source]) => {
  analyser.getByteFrequencyData(dataArray);

  return aggregate(dataArray.slice(BIN_LOWER, BIN_UPPER), NUM_BARS);
});

/**
 * App
 */

const vm = new Vue({
  el: '#app',
  data: {
    frequencies: [],
  },
  components: {
    'bar-chart': BarChart,
  },
});

frequencyData.subscribe(data => {
  vm.frequencies = data;
}, err => console.warn(err.message));

function resumeAudioContext() {
  CONTEXT.resume().then(() => {
    document.removeEventListener('click', resumeAudioContext);
  });
}

document.addEventListener('click', resumeAudioContext);</code></pre>
{% endcodepen %}
